(load "procedures.scm")

(define apply-in-lower-scheme apply)
(define (eval-each exprs env)
  (if (null? (cdr exprs))
    (evaluate (car exprs) env)
    (begin
      (evaluate (car exprs) env)
      (eval-each (cdr exprs) env))))

(define (*apply expr env)
  (let* ((evaluated (map (lambda (e) (evaluate e env)) expr))
	 (procedure (car evaluated))
	 (args      (cdr evaluated)))
    (cond ((procedure/primitive? procedure) (apply-in-lower-scheme (procedure/primitive procedure) args))
	  ((procedure/compound?  procedure)
	   (let* ((env (procedure/env procedure))
		  (extended-env (env/extend (map (lambda (lst) (cons (car lst) (cadr lst))) (zip (procedure/params procedure) args)) env)))
	     ;(display (env/vars extended-env))
	     ;(newline)
	     ;(display (procedure/params procedure))
	     ;(newline)
	     ;(display args)
	     (eval-each (procedure/body procedure) extended-env))) 
	     ;(for-each (lambda (procedure-expr) (evaluate procedure-expr extended-env)) (procedure/body procedure))))
	  (else (error "Invalid apply-expression" expr)))))

