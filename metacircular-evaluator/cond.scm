(define (cond/is? expr) (tagged-list? expr 'cond))
(define (cond/body expr) (cdr expr))
(define (cond/eval expr env)
  (define (eval-rest exprs)
    (if (null? exprs)
      '()
      (let* ((head (car exprs))
	     (predicate (car head))
	     (ontrue (cadr head)))
	(cond ((eq? predicate 'else) (evaluate ontrue env))
	      ((true? (evaluate predicate env) env) (evaluate ontrue env))
	      (else (eval-rest (cdr exprs)))))))
  (eval-rest (cond/body expr)))

(evaluator/set-handler! global-evaluator cond/is? cond/eval)
