(define (if/is? expr) (tagged-list? expr 'if))
(define (if/cond expr) (cadr expr))
(define (if/ontrue expr) (caddr expr))
(define (if/onfalse expr) 
  (if (null? (cdddr expr))
    '()
    (cadddr expr)))
(define (true? bin env) (not (eq? bin (evaluate 'false env))))

(define (if/eval expr env)
  (let ((pred (evaluate (if/cond expr) env)))
    (if (true? pred env) 
      (evaluate (if/ontrue expr) env)
      (if (not (null? (if/onfalse expr))) (evaluate (if/onfalse expr) env)))))

(evaluator/set-handler! global-evaluator if/is? if/eval)
(define (if/extend-global env)
  (env/define! env 'true true)
  (env/define! env 'false false))
